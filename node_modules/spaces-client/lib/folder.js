// Generated by CoffeeScript 1.6.3
(function() {
  var Folder, exports;

  Folder = (function() {
    var $, Faker, Resource, fs;

    function Folder() {}

    Faker = require('faker');

    $ = require('jquery');

    fs = require('fs');

    Resource = require('./resource');

    Folder.createFolder = function(site, sessionId, parentId, userId, onsuccess, onfail, oncreate) {
      var data;
      data = {
        document_library: {
          title: Faker.Lorem.sentences(1),
          parent_id: parentId
        }
      };
      return Resource.createResource(site, userId, sessionId, 'document_library', data, onsuccess, onfail, oncreate);
    };

    Folder.createDocument = function(site, sessionId, folderId, userId, onsuccess, onfail, oncreate) {
      var Spaces;
      Spaces = require('./spaces-client');
      return fs.readdir("./assets/files/", (function(err, files) {
        var fileName, m;
        if (err) {
          throw err;
        }
        m = Math.floor(Math.random() * files.length);
        fileName = files[m];
        return fs.stat("./assets/files/" + fileName, (function(err, stats) {
          var fileSize;
          if (err) {
            throw err;
          }
          fileSize = stats.size;
          return Folder.initS3PresignedPost(site, userId, sessionId, (function(data) {
            data = JSON.parse(data);
            return Folder.uploadToS3(site, userId, data, fileName, fileSize, (function() {
              Spaces.logger.debug("[%s][%s] Uploaded document to S3", site.site_id, userId);
              return Folder.createDocumentMetadata(folderId, site, userId, sessionId, data, fileName, fileSize, (function(response) {
                var documentId;
                Spaces.logger.debug("[%s][%s] Created document [%s]", site.site_id, userId, documentId);
                documentId = response.id;
                if (oncreate) {
                  oncreate(documentId);
                }
                return onsuccess();
              }), (function(message) {
                Spaces.logger.error("createDocumentMetadata: %s", message);
                return onfail();
              }));
            }), (function(message) {
              Spaces.logger.error("uploadToS3: %s", message);
              return onfail();
            }));
          }), (function(message) {
            Spaces.logger.error("initS3PresignedPost: %s", message);
            return onfail();
          }));
        }));
      }));
    };

    Folder.deleteDocument = function(site, sessionId, refObjId, userId, onsuccess, onfail, ondestroy) {
      return Resource.deleteResource(site, userId, sessionId, refObjId, 'document', onsuccess, onfail, ondestroy);
    };

    Folder.getPersonalDocLibId = function(site, userId, sessionId, onsuccess) {
      var headers, host;
      headers = {
        "Cookie": ["_social_navigator_session=" + sessionId, "path=/"]
      };
      host = site.full_url.match(/https:\/\/(.*)$/)[1];
      return Resource.getResource(host, userId, sessionId, null, 'document_library', '/current_user/document_library', headers, (function(folder) {
        var folderId;
        folderId = folder.match(/"id":"(.*?)"/)[1];
        return onsuccess(folderId);
      }));
    };

    Folder.initS3PresignedPost = function(site, userId, sessionId, onsuccess, onfail) {
      var Spaces, XMLHttpRequest, xhr;
      Spaces = require('./spaces-client');
      XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest;
      xhr = new XMLHttpRequest();
      xhr.setDisableHeaderCheck(true);
      xhr.open('GET', site.full_url + "/documents/init_s3_presigned_post?legacy=false", true);
      xhr.setRequestHeader("Accept", "application/vnd.moxiesoft.spaces-v1+json");
      xhr.setRequestHeader("Cookie", ["_social_navigator_session=" + sessionId, "path=/"]);
      xhr.onload = function() {
        if (this.status === 200 || this.status === 201) {
          Spaces.logger.debug("[%s][%s] Folder.initS3PresignedPost succeeded: %s", site.site_id, userId, this.responseText);
          return onsuccess(this.responseText);
        } else {
          Spaces.logger.error("[%s][%s] Folder.initS3PresignedPost failed: %s - %s", site.site_id, userId, this.status, this.responseText);
          return onfail(this.status, this.responseText);
        }
      };
      return xhr.send();
    };

    Folder.uploadToS3 = function(site, userId, data, fileName, fileSize, onsuccess, onfail) {
      var Spaces, body, boundaryKey, key, keys, post_options, post_req, x, _i, _len;
      Spaces = require('./spaces-client');
      boundaryKey = Math.random().toString(16);
      keys = ["AWSAccessKeyId", "key", "policy", "signature", "acl", "success_action_status"];
      body = "\r\n";
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        body += '--' + boundaryKey + '\r\n';
        body += 'Content-Disposition: form-data; name="' + key + '"\r\n\r\n';
        body += data.fields[key] + '\r\n';
      }
      body += '--' + boundaryKey + '\r\n';
      body += 'Content-Disposition: form-data; name="file"; filename="' + fileName + '"\r\n';
      body += 'Content-Type: application/vnd.openxmlformats-officedocument.wordprocessingml.document\r\n\r\n';
      post_options = {
        host: data.url.match(/https:\/\/(.*)\/$/)[1],
        method: 'POST',
        headers: {
          "Content-Type": 'multipart/form-data; boundary="' + boundaryKey + '"',
          "Content-Length": body.length + fileSize + ('\r\n--' + boundaryKey + '--').length,
          "Accept": 'application/vnd.moxiesoft.spaces-v1+json'
        }
      };
      post_req = require('https').request(post_options, (function(res) {
        var response;
        res.setEncoding('utf8');
        response = "";
        res.on('data', (function(chunk) {
          return response = response + chunk;
        }));
        return res.on('end', (function() {
          if (res.statusCode === 200 || res.statusCode === 201) {
            return onsuccess();
          } else {
            return onfail(response);
          }
        }));
      }));
      post_req.on('error', (function(e) {
        Spaces.logger.error("[%s][%s] Folder.uploadToS3 failed: %j", site.site_id, userId, e);
        return onfail(e);
      }));
      post_req.write(body);
      x = fs.createReadStream('./assets/files/' + fileName, {
        bufferSize: 4 * 1024
      });
      return x.on('end', (function() {
        return post_req.end('\r\n--' + boundaryKey + '--');
      })).pipe(post_req, {
        end: false
      }).on('error', (function(e) {
        return Spaces.logger.error("[%s][%s] read stream error: %j", site.site_id, userId, e);
      }));
    };

    Folder.createDocumentMetadata = function(folderId, site, userId, sessionId, data, fileName, fileSize, onsuccess, onfail) {
      var Spaces, XMLHttpRequest, xhr;
      Spaces = require('./spaces-client');
      data = $.param({
        document: {
          parent_id: folderId,
          version: true,
          indirect_file_save: data.spaces_fields["document[indirect_file_save"],
          file_updated: data.spaces_fields["document[file_updated]"],
          upload: {
            file_id: data.spaces_fields["document[upload][file_id]"],
            file_s3_key: data.fields.key,
            file_name: fileName,
            file_size: fileSize,
            file_s3: data.spaces_fields["document[upload][file_s3]"]
          }
        }
      });
      XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest;
      xhr = new XMLHttpRequest();
      xhr.setDisableHeaderCheck(true);
      xhr.open('POST', site.full_url + "/document_libraries/" + folderId + "/documents", true);
      xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      xhr.setRequestHeader("Accept", "application/vnd.moxiesoft.spaces-v1+json");
      xhr.setRequestHeader("Cookie", ["_social_navigator_session=" + sessionId, "path=/"]);
      xhr.onload = function() {
        if (this.status === 200 || this.status === 201) {
          return onsuccess(this.responseText);
        } else {
          Spaces.logger.error("[%s][%s] Folder.createDocument failed: %s - %s", site.site_id, userId, this.status, this.responseText);
          return onfail(this.status, this.responseText);
        }
      };
      return xhr.send(data);
    };

    return Folder;

  })();

  module.exports = exports = Folder;

}).call(this);
