// Generated by CoffeeScript 1.6.3
(function() {
  var Site, exports, logger;

  logger = require('./logger.js');

  Site = (function() {
    function Site() {}

    Site.createSite = function(data, onsuccess, onfail) {
      var $, Spaces;
      Spaces = require('./spaces-client.js');
      $ = require("jquery");
      return $.ajax(Spaces.mothership_url + '/api/sites', {
        type: 'POST',
        dataType: 'json',
        data: JSON.stringify(data),
        beforeSend: function(request) {
          request.setRequestHeader("Accept", "application/vnd.moxiesoft.mothership-v1+json");
          request.setRequestHeader("Content-Type", "application/json");
          return request.setRequestHeader("API-KEY", '5d66dba7bf456cbfa5319aedeca9daf2');
        },
        error: function(jqXHR, textStatus, errorThrown) {
          logger.error("Error creating site: %s - %s - %j", textStatus, errorThrown, jqXHR);
          return onfail(errorThrown);
        },
        success: function(data) {
          var siteId;
          siteId = JSON.stringify(data).match(/.*"site_id":"(.*?)".*/)[1];
          logger.debug('[%s][%s] Site Created', siteId, 'Admin');
          return onsuccess(data);
        }
      });
    };

    Site.login = function(data, site, onsuccess, onfail) {
      var options;
      options = {
        hostname: site.sub_domain + "." + site.domain,
        path: "/users/sign_in.json",
        method: 'POST',
        headers: {
          "Accept": "application/vnd.moxiesoft.mothership-v1+json",
          "Content-Type": "application/json"
        }
      };
      return Site.tryUntilSuccess(data, options, (function(resp, cookies) {
        var bit, cookie, list, parts, _i, _j, _len, _len1, _ref;
        list = {};
        for (_i = 0, _len = cookies.length; _i < _len; _i++) {
          cookie = cookies[_i];
          _ref = cookie.split(";");
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            bit = _ref[_j];
            parts = bit.split('=');
            list[parts.shift().trim()] = unescape(parts.join('='));
          }
        }
        return onsuccess(resp, list);
      }), (function(msg) {
        return onfail(msg);
      }));
    };

    Site.tryUntilSuccess = function(data, options, onsuccess, onerror) {
      var https, req;
      https = require('https');
      req = https.request(options, (function(res) {
        var resp;
        res.setEncoding('utf8');
        resp = "";
        res.on('data', (function(chunk) {
          return resp += chunk.toString("utf-8");
        }));
        return res.on('end', (function() {
          var cb;
          if (res.statusCode === 200 || res.statusCode === 201) {
            return onsuccess(resp, res.headers['set-cookie']);
          } else {
            cb = function() {
              return Site.tryUntilSuccess(data, options, onsuccess, onerror);
            };
            return setTimeout(cb, 10000);
          }
        }));
      }));
      req.write(JSON.stringify(data));
      req.end();
      return req.on('error', (function(e) {
        logger.error('Unable to log in: %s', e.message);
        return onerror(e.message);
      }));
    };

    return Site;

  })();

  module.exports = exports = Site;

}).call(this);
