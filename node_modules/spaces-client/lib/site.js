// Generated by CoffeeScript 1.6.3
(function() {
  var Site, exports;

  Site = (function() {
    function Site() {}

    Site.createSite = function(data, onsuccess, onfail) {
      var $, Spaces;
      Spaces = require("./spaces-client.js");
      $ = require("jquery");
      return $.ajax(Spaces.mothership_url + '/api/sites', {
        type: 'POST',
        dataType: 'json',
        data: JSON.stringify(data),
        beforeSend: function(request) {
          request.setRequestHeader("Accept", "application/vnd.moxiesoft.mothership-v1+json");
          request.setRequestHeader("Content-Type", "application/json");
          return request.setRequestHeader("API-KEY", '5d66dba7bf456cbfa5319aedeca9daf2');
        },
        error: function(jqXHR, textStatus, errorThrown) {
          console.log("Error creating site: " + textStatus + " - " + errorThrown + " - " + JSON.stringify(jqXHR));
          return onfail(errorThrown);
        },
        success: function(data) {
          console.log("Site Created: " + JSON.stringify(data));
          return onsuccess(data);
        }
      });
    };

    Site.login = function(data, site, onsuccess, onfail) {
      var Spaces, https, options, req;
      Spaces = require("./spaces-client.js");
      options = {
        hostname: site.sub_domain + "." + site.domain,
        path: "/users/sign_in.json",
        method: 'POST',
        headers: {
          "Accept": "application/vnd.moxiesoft.mothership-v1+json",
          "Content-Type": "application/json"
        }
      };
      https = require('https');
      req = https.request(options, (function(res) {
        res.setEncoding('utf8');
        return res.on('data', (function(chunk) {
          var bit, cookie, cookies, list, parts, _i, _j, _len, _len1, _ref;
          console.log('Logged In: ' + chunk);
          cookies = res.headers['set-cookie'];
          list = {};
          for (_i = 0, _len = cookies.length; _i < _len; _i++) {
            cookie = cookies[_i];
            _ref = cookie.split(";");
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              bit = _ref[_j];
              parts = bit.split('=');
              list[parts.shift().trim()] = unescape(parts.join('='));
            }
          }
          return onsuccess(chunk, list);
        }));
      }));
      req.on('error', (function(e) {
        console.log('Error Logging In: ' + e.message);
        return onfail(e.message);
      }));
      req.write(JSON.stringify(data));
      return req.end();
    };

    return Site;

  })();

  module.exports = exports = Site;

}).call(this);
