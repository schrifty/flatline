// Generated by CoffeeScript 1.6.3
(function() {
  var $, Config, NotFound, Runner, Spaces, connect, express, io, logger, port, server;

  NotFound = function(msg) {
    this.name = "NotFound";
    Error.call(this, msg);
    return Error.captureStackTrace(this, arguments_.callee);
  };

  connect = require("connect");

  express = require("express");

  $ = require("jquery");

  Runner = require("./static/js/runner");

  logger = require("./static/js/logger");

  Config = require("./static/js/config");

  Spaces = require("spaces-client");

  port = process.env.PORT || 8081;

  server = express.createServer();

  server.configure(function() {
    server.set("views", __dirname + "/views");
    server.set("view options", {
      layout: false
    });
    server.use(express.logger('dev'));
    server.use(express.favicon());
    server.use(connect.bodyParser());
    server.use(express.cookieParser());
    server.use(express.session({
      secret: "shhhhhhhhh!"
    }));
    server.use(connect["static"](__dirname + "/static"));
    return server.use(server.router);
  });

  server.error(function(err, req, res, next) {
    if (err instanceof NotFound) {
      return res.render("404.jade", {
        locals: {
          title: "404 - Not Found",
          description: "",
          author: "",
          analyticssiteid: "XXXXXXX"
        },
        status: 404
      });
    } else {
      return res.render("500.jade", {
        locals: {
          title: "The Server Encountered an Error",
          description: "",
          author: "",
          analyticssiteid: "XXXXXXX",
          error: err
        },
        status: 500
      });
    }
  });

  server.listen(port);

  io = require("socket.io");

  io = io.listen(server);

  io.sockets.on("connection", function(socket) {
    logger.debug("Client Connected");
    socket.on("message", function(data) {
      socket.broadcast.emit("server_message", data);
      return socket.emit("server_message", data);
    });
    return socket.on("disconnect", function() {
      return logger.debug("Client Disconnected.");
    });
  });

  server.get("/", function(req, res) {
    return res.render("index.jade", {
      locals: {
        title: "Your Page Title",
        description: "Your Page Description",
        author: "Your Name",
        analyticssiteid: "XXXXXXX"
      }
    });
  });

  server.post("/run", function(req, res) {
    Runner.start();
    return res.send(200);
  });

  server.post("/login", function(req, res) {
    var site;
    site = req.body.site;
    Runner.login(site);
    return res.send(200);
  });

  server.post("/createuser", function(req, res) {
    var site;
    site = req.body.site;
    Runner.createUser(site, null);
    return res.send(200);
  });

  server.get("/500", function(req, res) {
    throw new Error("This is a 500 Error");
  });

  server.get("/*", function(req, res) {
    throw new NotFound;
  });

  logger.debug("Listening on http://0.0.0.0:%d", port);

}).call(this);
