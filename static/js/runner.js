// Generated by CoffeeScript 1.6.3
(function() {
  var CREATE_PERIOD_MS_SITES, MAX_SITES, REST_PERIOD, Runner;

  CREATE_PERIOD_MS_SITES = 100000;

  MAX_SITES = 4;

  REST_PERIOD = 10000;

  Runner = (function() {
    var Action, Faker, Session, Spaces, logger;

    function Runner() {}

    Faker = require("Faker");

    Action = require("./action");

    Session = require("./session");

    logger = require("./logger");

    Spaces = require("spaces-client");

    Runner.start = function() {
      return Action.init(function() {
        return Runner.createNextSite();
      });
    };

    Runner.createNextSite = function() {
      var data, siteId;
      siteId = "xx" + Faker.Internet.domainWord();
      data = {
        site: {
          site_id: siteId,
          customer_name: "Acme",
          site_type_name: "Freemium",
          settings: {
            skip_signup_activation: true
          }
        }
      };
      return Spaces.Site.createSite(data, (function(site) {
        site = Session.registerSite(site);
        return Runner.login(site, 'tech-support@moxiesoft.com', 'k3ithm00n', (function(user, cookies) {
          var callback;
          site = Session.registerUser(site.site_id, user, cookies['_social_navigator_session']);
          Action.seedSite(site, user.id, (function() {
            return Runner.createUser(site);
          }));
          if (Session.siteCount() < MAX_SITES) {
            callback = function() {
              return Runner.createNextSite();
            };
            return setTimeout(callback, (CREATE_PERIOD_MS_SITES / 2) + Math.floor(Math.random() * CREATE_PERIOD_MS_SITES));
          }
        }));
      }), (function(message) {
        return logger.error("Unable to create successfully - abandoning site [%s]: %s", siteId, message);
      }));
    };

    Runner.createUser = function(site) {
      var data, email, password;
      password = "P3qu0ts!";
      email = Faker.Internet.email();
      data = {
        user: {
          email: email,
          display_name: Faker.Name.findName(),
          password: password,
          password_confirmation: password
        }
      };
      return Spaces.User.create(data, site.full_url, (function(user) {
        var callback;
        logger.info("[%s][%s] Added User [%s]", site.site_id, user.id, email);
        Runner.login(site, email, password, (function(user, cookies) {
          site = Session.registerUser(site.site_id, user, cookies['_social_navigator_session']);
          return Action.seedUser(site, user.id, (function() {
            return Runner.startActivity(site, user.id);
          }));
        }), (function(msg) {
          return logger.error("[%s][%s] Failed to authenticate user: %s", site.site_id, email, msg);
        }));
        if (site.currentUsers < site.maxUsers) {
          callback = function() {
            return Runner.createUser(site);
          };
          return setTimeout(callback, (site.signupPeriod / 2) + Math.floor(Math.random() * site.signupPeriod));
        } else {
          return logger.info("[%s][%s] usercount: %d, maxusers: %d", site.site_id, 'bleh', Session.userCount(), site.maxUsers);
        }
      }), (function(message) {
        return logger.error("[%s][%s] Failed to create user %s", site.site_id, email, message);
      }));
    };

    Runner.login = function(site, email, password, onsuccess, onfail) {
      var data;
      data = {
        user: {
          email: email,
          password: password
        }
      };
      return Spaces.Site.login(data, site, (function(resp, cookies) {
        return onsuccess(JSON.parse(resp), cookies);
      }), (function(msg) {
        if (onfail) {
          return onfail(msg);
        }
      }));
    };

    Runner.startActivity = function() {
      var callback;
      require("./action").doSomething();
      callback = function() {
        return Runner.startActivity();
      };
      return setTimeout(callback, (REST_PERIOD / 2) + Math.floor(Math.random() * REST_PERIOD));
    };

    return Runner;

  })();

  module.exports = Runner;

}).call(this);
